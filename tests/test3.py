"""
Test Script for Bank Simulation C++ Program

Description:
This Python script is designed to automate the testing process for a C++ bank simulation program. 
The script runs the compiled C++ executable with a specified input file, captures the output, 
and compares it against the expected output to verify the correctness of the program. 

Key Features:
- **Execution of C++ Program:** The script uses the `subprocess` module to run the C++ executable, 
  feeding it an input file and capturing its output. This allows for automated testing of the C++ program.
  
- **Output Validation:** After the C++ program runs, the script compares the actual output produced by 
  the program with a predefined expected output. The comparison is done after stripping any leading 
  or trailing whitespace to ensure that minor formatting differences do not cause false test failures.

- **Feedback:** Based on the comparison, the script outputs whether the test passed or failed. 
  In case of failure, it provides both the expected and actual outputs for easy debugging.

Parameters:
- `input_file`: The path to the text file that contains the input data for the C++ program.
- `executable_path`: The path to the compiled C++ executable that will be tested.
- `expected_output`: The expected output string, which the actual output from the C++ program will be compared against.

Usage:
1. Modify the `input_file` and `executable_path` variables to point to the correct locations of the input file 
   and the C++ executable, respectively.
2. Define the `expected_output` based on the anticipated correct output of the C++ program given the input data.
3. Run the script. The script will execute the C++ program, capture the output, and compare it to the expected output. 
   It will then indicate whether the test passed or failed.

Example Scenario:
This script can be used in a continuous integration (CI) environment where the C++ program is regularly tested 
against a suite of test cases. It helps in quickly identifying any deviations from the expected behavior, 
making it easier to maintain and improve the C++ program.

Author: Andy Zhang
Last Modified: Sep. 2024

"""

import subprocess

def run_cpp_program(input_file, executable_path):
    """
    Runs the C++ program with the given input file.

    :param input_file: Path to the input file that contains the data to be processed by the C++ program.
    :param executable_path: Path to the compiled C++ executable.
    :return: The output generated by the C++ program.
    """
    # Run the C++ program with the input file
    with open(input_file, 'r') as infile:
        process = subprocess.Popen([executable_path], stdin=infile, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        stdout, stderr = process.communicate()

        if stderr:
            print(f"Error: {stderr.decode()}")
        return stdout.decode()

def validate_output(expected_output, actual_output):
    """
    Compares the actual output of the program with the expected output.

    :param expected_output: The expected output string.
    :param actual_output: The actual output string generated by the C++ program.
    """
    if expected_output.strip() == actual_output.strip():
        print("Test Passed")
    else:
        print("Test Failed")
        print("Expected Output:\n" + expected_output)
        print("Actual Output:\n" + actual_output)

# Define the input file, the expected output, and the path to the executable
input_file = '../input/sample_input_3.txt'
executable_path = '../BankSim'  # Modify this path if the executable is in a different location

# Define the expected output directly in the script
expected_output = """Simulation Begins
Processing an arrival event at time:    1
Processing an arrival event at time:    2
Processing an arrival event at time:    3
Processing an arrival event at time:    4
Processing a departure event at time:   4
Processing an arrival event at time:    5
Processing a departure event at time:   6
Processing an arrival event at time:    6
Processing an arrival event at time:    7
Processing an arrival event at time:    8
Processing an arrival event at time:    9
Processing an arrival event at time:   10
Processing an arrival event at time:   11
Processing a departure event at time:  11
Processing an arrival event at time:   12
Processing an arrival event at time:   13
Processing an arrival event at time:   14
Processing a departure event at time:  15
Processing an arrival event at time:   15
Processing an arrival event at time:   16
Processing a departure event at time:  16
Processing an arrival event at time:   17
Processing an arrival event at time:   18
Processing an arrival event at time:   19
Processing an arrival event at time:   20
Processing an arrival event at time:   21
Processing an arrival event at time:   22
Processing a departure event at time:  23
Processing an arrival event at time:   23
Processing an arrival event at time:   24
Processing an arrival event at time:   25
Processing an arrival event at time:   26
Processing a departure event at time:  26
Processing an arrival event at time:   27
Processing an arrival event at time:   28
Processing an arrival event at time:   29
Processing an arrival event at time:   30
Processing an arrival event at time:   31
Processing an arrival event at time:   32
Processing a departure event at time:  32
Processing an arrival event at time:   33
Processing an arrival event at time:   34
Processing an arrival event at time:   35
Processing a departure event at time:  36
Processing an arrival event at time:   36
Processing an arrival event at time:   37
Processing an arrival event at time:   38
Processing a departure event at time:  38
Processing an arrival event at time:   39
Processing an arrival event at time:   40
Processing an arrival event at time:   41
Processing an arrival event at time:   42
Processing an arrival event at time:   43
Processing a departure event at time:  43
Processing an arrival event at time:   44
Processing an arrival event at time:   45
Processing a departure event at time:  46
Processing an arrival event at time:   46
Processing an arrival event at time:   47
Processing an arrival event at time:   48
Processing an arrival event at time:   49
Processing a departure event at time:  50
Processing an arrival event at time:   50
Processing a departure event at time:  52
Processing a departure event at time:  58
Processing a departure event at time:  59
Processing a departure event at time:  62
Processing a departure event at time:  67
Processing a departure event at time:  71
Processing a departure event at time:  73
Processing a departure event at time:  79
Processing a departure event at time:  82
Processing a departure event at time:  87
Processing a departure event at time:  91
Processing a departure event at time:  92
Processing a departure event at time:  95
Processing a departure event at time:  97
Processing a departure event at time: 101
Processing a departure event at time: 106
Processing a departure event at time: 112
Processing a departure event at time: 114
Processing a departure event at time: 118
Processing a departure event at time: 119
Processing a departure event at time: 122
Processing a departure event at time: 127
Processing a departure event at time: 133
Processing a departure event at time: 135
Processing a departure event at time: 139
Processing a departure event at time: 140
Processing a departure event at time: 143
Processing a departure event at time: 148
Processing a departure event at time: 150
Processing a departure event at time: 154
Processing a departure event at time: 157
Processing a departure event at time: 158
Processing a departure event at time: 164
Processing a departure event at time: 169
Processing a departure event at time: 171
Processing a departure event at time: 175
Processing a departure event at time: 178
Simulation Ends

Final Statistics:

    Total number of people processed: 50
    Average amount of time spent waiting: 63.84
"""

# Run the test and validate the output
actual_output = run_cpp_program(input_file, executable_path)
validate_output(expected_output, actual_output)
