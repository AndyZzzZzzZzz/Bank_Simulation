"""
Test Script for Bank Simulation C++ Program

Description:
This Python script is designed to automate the testing process for a C++ bank simulation program. 
The script runs the compiled C++ executable with a specified input file, captures the output, 
and compares it against the expected output to verify the correctness of the program. 

Key Features:
- **Execution of C++ Program:** The script uses the `subprocess` module to run the C++ executable, 
  feeding it an input file and capturing its output. This allows for automated testing of the C++ program.
  
- **Output Validation:** After the C++ program runs, the script compares the actual output produced by 
  the program with a predefined expected output. The comparison is done after stripping any leading 
  or trailing whitespace to ensure that minor formatting differences do not cause false test failures.

- **Feedback:** Based on the comparison, the script outputs whether the test passed or failed. 
  In case of failure, it provides both the expected and actual outputs for easy debugging.

Parameters:
- `input_file`: The path to the text file that contains the input data for the C++ program.
- `executable_path`: The path to the compiled C++ executable that will be tested.
- `expected_output`: The expected output string, which the actual output from the C++ program will be compared against.

Usage:
1. Modify the `input_file` and `executable_path` variables to point to the correct locations of the input file 
   and the C++ executable, respectively.
2. Define the `expected_output` based on the anticipated correct output of the C++ program given the input data.
3. Run the script. The script will execute the C++ program, capture the output, and compare it to the expected output. 
   It will then indicate whether the test passed or failed.

Example Scenario:
This script can be used in a continuous integration (CI) environment where the C++ program is regularly tested 
against a suite of test cases. It helps in quickly identifying any deviations from the expected behavior, 
making it easier to maintain and improve the C++ program.

Author: Andy Zhang
Last Modified: Sep. 2024

"""

import subprocess

def run_cpp_program(input_file, executable_path):
    """
    Runs the C++ program with the given input file.

    :param input_file: Path to the input file that contains the data to be processed by the C++ program.
    :param executable_path: Path to the compiled C++ executable.
    :return: The output generated by the C++ program.
    """
    # Run the C++ program with the input file
    with open(input_file, 'r') as infile:
        process = subprocess.Popen([executable_path], stdin=infile, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        stdout, stderr = process.communicate()

        if stderr:
            print(f"Error: {stderr.decode()}")
        return stdout.decode()

def validate_output(expected_output, actual_output):
    """
    Compares the actual output of the program with the expected output.

    :param expected_output: The expected output string.
    :param actual_output: The actual output string generated by the C++ program.
    """
    if expected_output.strip() == actual_output.strip():
        print("Test Passed")
    else:
        print("Test Failed")
        print("Expected Output:\n" + expected_output)
        print("Actual Output:\n" + actual_output)

# Define the input file, the expected output, and the path to the executable
input_file = '../input/sample_input_2.txt'
executable_path = '../BankSim'  # Modify this path if the executable is in a different location

# Define the expected output directly in the script
expected_output = """Simulation Begins
Processing an arrival event at time:    2
Processing an arrival event at time:    3
Processing a departure event at time:   5
Processing an arrival event at time:    5
Processing an arrival event at time:    7
Processing a departure event at time:   7
Processing an arrival event at time:    9
Processing a departure event at time:  11
Processing an arrival event at time:   12
Processing a departure event at time:  12
Processing a departure event at time:  14
Processing an arrival event at time:   15
Processing a departure event at time:  20
Processing a departure event at time:  23
Simulation Ends

Final Statistics:

    Total number of people processed: 7
    Average amount of time spent waiting: 2.57143
"""

# Run the test and validate the output
actual_output = run_cpp_program(input_file, executable_path)
validate_output(expected_output, actual_output)
